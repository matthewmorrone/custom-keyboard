diff --git a/README.md b/README.md
index 36e6ba9..4d338b4 100644
--- a/README.md
+++ b/README.md
@@ -1,31 +1,25 @@
++ show clipboard contents after cut/copy
++ change space insertion to mod on full line length 
++ tabs on symbols page 
++ add toggle for whether or not the first member of the popup is sent upon release
++ convenience method for setting checks
++ delete all space up to line end (while prev char is space)
++ press and hold del/backspace for up to space
++ don't cancel popup if it has a long press action
 + font color, background, border from settings
 + settings for numbers, colors, popupchars
 + reorder layouts from settings: draggable for layout management
-+ don't cancel popup if it has a long press action
 + more pinyin, combine with autocorrect
 + selection doesn't work with 4space
-+ function to determine cursor position
-+ delete all space up to line end (while prev char is space)
-+ press and hold del/backspace for up to space
 + runtime modification/generation of layouts
 + generate keyboard programmatically
-+ show clipboard contents after cut/copy
 + page containing clipboard history
 + choice of fifo or filo for clipboard history
 + button to access recent clipboard entries
-+ personal dictionary settings link
 + press and hold custom keys to change them
 + close by clicking outside popup
 + delete autoinsertions by pressing once
-+ colorize categories
-+ settings use categories for hide/show
-+ layout checkboxes use category
-+ normalizer.normalize(x, normalizer.form.nfkc)
 + macro customization
-+ stay on current layout
-+ change space insertion to mod on full line length 
-+ prefix/suffix lines, add line numbers
-+ transparent keyboard
 + selection moves while typing
 + select with manual cursor movement
 + move cursor and select text by dragging the space key
@@ -34,17 +28,13 @@
 + drag control for keyboard height
 + adjust key size
 + key height change
-+ suggestion bar
 + include tags ffs
 + emoji 
-+ scrollable/swipeable areas
++ swiping, scrollable/swipeable areas
 + swipe on spacebar + left and right swipe on spacebar
 + key codes and labels customizable
 + make popup keys repeatable
-+ swiping
-+ tabs on symbols page 
 + autoreplace toggleable from keyboard predictions 
-+ adding entries on the fly
 + release on popup for choice
 + settings opens up a drawer
 + 2nd bar changeable
@@ -52,7 +42,6 @@
 + slideable bar
 + shortcuts with sigil
 + bug when autoshift
-+ convenience method for setting checks
 + column from table
 + identify hash
 + format numbers
@@ -71,7 +60,6 @@
 + edittext popup for temporary stuff
 + 2d layout navigation
 + popup for arbitrary find/replace screen
-+ swiping
 + separate out settings page for layouts and custom keys
 + layout of popup
 + popup contents should also be keys
@@ -84,9 +72,7 @@
 + hide and show specific keys, especially in the top or bottom
 + row with toggles from settings page
 + add setting that allows specification of longpress delay
-+ add toggle for whether or not the first member of the popup is sent upon release
 + add slots in the settings page for customizing the letters that appear on long press
-+ settings screen for autoreplace configuration
 + script for autoreinstall
 + password buttons
 + calculation parsing
@@ -97,6 +83,7 @@
 + get location as string, coordinates or address
 + include contact names
 + learn new words
++ adding entries on the fly
 
 
 === Settings ===
diff --git a/app/src/main/java/com/custom/keyboard/CandidateView.java b/app/src/main/java/com/custom/keyboard/CandidateView.java
index 7631651..7b853cd 100644
--- a/app/src/main/java/com/custom/keyboard/CandidateView.java
+++ b/app/src/main/java/com/custom/keyboard/CandidateView.java
@@ -197,6 +197,20 @@ public class CandidateView extends View {
         scrollTo(sx, getScrollY());
         invalidate();
     }
+    
+    public void setSuggestions(List<String> suggestions) {
+        clear();
+        if (suggestions != null) {
+            mSuggestions = new ArrayList<>(suggestions);
+        }
+        // mSuggestions.add(0, "‚öô");
+        scrollTo(0, 0);
+        mTargetScrollX = 0;
+        // Compute the total width
+        draw(new Canvas());
+        invalidate();
+        requestLayout();
+    }
 
     public void setSuggestions(List<String> suggestions, boolean completions, boolean typedWordValid) {
         clear();
diff --git a/app/src/main/java/com/custom/keyboard/CustomInputMethodService.java b/app/src/main/java/com/custom/keyboard/CustomInputMethodService.java
index 13eb398..eabad9c 100644
--- a/app/src/main/java/com/custom/keyboard/CustomInputMethodService.java
+++ b/app/src/main/java/com/custom/keyboard/CustomInputMethodService.java
@@ -49,6 +49,7 @@ public class CustomInputMethodService extends InputMethodService implements Keyb
     int MAX = 65536;
     boolean f = false;
     boolean t = true;
+    static String empty = "";
 
     String spaces = "    ";
     String tab = "	";
@@ -78,8 +79,8 @@ public class CustomInputMethodService extends InputMethodService implements Keyb
     Toast toast;
 
     int selectionCase = 0;
-    static String hexBuffer = "";
-    static String morseBuffer = "";
+    static String hexBuffer = empty;
+    static String morseBuffer = empty;
 
     InputConnection ic = getCurrentInputConnection();
     SharedPreferences sharedPreferences;
@@ -122,8 +123,7 @@ public class CustomInputMethodService extends InputMethodService implements Keyb
         if (sharedPreferences.getBoolean("gothic",     t)) {layouts.add(new CustomKeyboard(this, R.layout.gothic,      "gothic",      "Gothic",     "êåµêçàêå¥êçÇêçÑêçÖ").setCategory(Category.Lang));}
         if (sharedPreferences.getBoolean("greek",      t)) {layouts.add(new CustomKeyboard(this, R.layout.greek,       "greek",       "Greek",      "œÇŒµœÅœÑœÖŒ∏").setCategory(Category.Lang));}
         if (sharedPreferences.getBoolean("hex",        t)) {layouts.add(new CustomKeyboard(this, R.layout.hex,         "hex",         "Hex",        "\\uabcd").setCategory(Category.Util));}
-        if (sharedPreferences.getBoolean("hiragana",   t)) {layouts.add(new CustomKeyboard(this, R.layout.hiragana,    "hiragana",    "Hiragana",   "„ÅÇ„ÅÑ„ÅÜ„Åà„Åä").setCategory(Category.Lang));}
-        if (sharedPreferences.getBoolean("katakana",   t)) {layouts.add(new CustomKeyboard(this, R.layout.katakana,    "katakana",    "Katakana",   "„Ç¢„Ç§„Ç¶„Ç®„Ç™").setCategory(Category.Lang));}
+        if (sharedPreferences.getBoolean("kana",       t)) {layouts.add(new CustomKeyboard(this, R.layout.hiragana,    "hiragana",    "Hiragana",   "„ÅÇ„ÅÑ„ÅÜ„Åà„Åä").setCategory(Category.Lang));}
         if (sharedPreferences.getBoolean("insular",    t)) {layouts.add(new CustomKeyboard(this, R.layout.insular,     "insular",     "Insular",    "Íù∫Íùº·µπÍûÉÍûÖÍûá").setCategory(Category.Font).setOrder(5));}
         if (sharedPreferences.getBoolean("ipa",        t)) {layouts.add(new CustomKeyboard(this, R.layout.ipa,         "ipa",         "IPA",        " î ï ò«Å«Ç").setCategory(Category.Misc));}
         if (sharedPreferences.getBoolean("lisu",       t)) {layouts.add(new CustomKeyboard(this, R.layout.lisu,        "lisu",        "Lisu",       "‚µöÍìüÍì±Íì§Íìï‚ÖÑ").setCategory(Category.Lang));}
@@ -181,10 +181,10 @@ public class CustomInputMethodService extends InputMethodService implements Keyb
                             }
                             else key.label = layout.label;
                         }
-                        else key.label = "";
+                        else key.label = empty;
                     }
                     catch (Exception e) {
-                        key.label = "";
+                        key.label = empty;
                     }
                 }
             }
@@ -252,7 +252,7 @@ public class CustomInputMethodService extends InputMethodService implements Keyb
                             if (index >= layoutMod) {
                                 key.x = bounds.maxX;
                                 key.width = 0;
-                                key.label = "";
+                                key.label = empty;
                             }
                             else {
                                 key.x += (moveBy * index);
@@ -274,7 +274,7 @@ public class CustomInputMethodService extends InputMethodService implements Keyb
             autoLabel = new StringBuilder();
             for(Keyboard.Key key : layout.getKeys()) {
                 if (key.label == null) continue;
-                if (key.label == "") continue;
+                if (key.label == empty) continue;
                 if (key.label.length() > 1) continue;
                 if (Util.isNumeric(String.valueOf(key.label))) continue;
                 if (",\";".contains(String.valueOf(key.label))) continue;
@@ -282,7 +282,7 @@ public class CustomInputMethodService extends InputMethodService implements Keyb
                 if (autoLabel.length() > 2) break;
             }
             String label = autoLabel.toString().trim();
-            if (layout.label == null || layout.label.equals("")) {
+            if (layout.label == null || layout.label.equals(empty)) {
                 layout.label = label;
             }
         }
@@ -722,7 +722,7 @@ public class CustomInputMethodService extends InputMethodService implements Keyb
         setKeyHeight();
         /*
         String generated = "„ÖÇ„ÖÉ „Öà„Öâ „Ñ∑„Ñ∏ „Ñ±„Ñ≤ „ÖÖ„ÖÜ „Öõ „Öï „Öë „Öê„Öí „Öî„Öñ _ „ÖÅ „Ñ¥ „Öá „Ñπ „Öé „Öó „Öì „Öè „Ö£ _ „Öã „Öå „Öä „Öç „Ö† „Öú „Ö°";
-        if (generated != null && !generated.equals("")) {
+        if (generated != null && !generated.equals(empty)) {
             System.out.println(Generator.toKeyboard(generated));
         }
         LayoutInflater inflater = LayoutInflater.from(getBaseContext());
@@ -841,7 +841,7 @@ public class CustomInputMethodService extends InputMethodService implements Keyb
 
     public String getText(InputConnection ic) {
         CharSequence text = ic.getSelectedText(0);
-        if (text == null) return "";
+        if (text == null) return empty;
         return (String)text;
     }
 
@@ -876,7 +876,7 @@ public class CustomInputMethodService extends InputMethodService implements Keyb
         ic = getCurrentInputConnection();
         ic.requestCursorUpdates(3);
         int cursorLocation = getSelectionStart();
-        String ins = sharedPreferences.getString(key, "");
+        String ins = sharedPreferences.getString(key, empty);
         ic.beginBatchEdit();
         commitText(ins, cursorLocation + (ins != null ? ins.length() : 0));
         ic.endBatchEdit();
@@ -965,7 +965,19 @@ public class CustomInputMethodService extends InputMethodService implements Keyb
         Variables.setSelectOff();
     }
     
-    public int cursorLocation() {
+    public int getCurrentLine() {
+        return Util.getLines(ic.getTextBeforeCursor(MAX, 0).toString()).length;
+    }
+    
+    public int getLineCount() {
+        return Util.getLines(getAllText(ic)).length;
+    }
+    
+    public int[] getCursorLocation() {
+        return new int[] { cursorLocationOnLine(), getCurrentLine() };
+    }
+    
+    public int cursorLocationOnLine() {
         return prevLine().length();
     }
 
@@ -1034,11 +1046,11 @@ public class CustomInputMethodService extends InputMethodService implements Keyb
         try {
             ClipboardManager clipboardManager = (ClipboardManager)getSystemService(Context.CLIPBOARD_SERVICE);
             // ClipData clip = ClipData.newPlainText(text);
-            ClipData clip = ClipData.newPlainText("", Util.toCharSequence(text));
+            ClipData clip = ClipData.newPlainText(empty, Util.toCharSequence(text));
             clipboardManager.setPrimaryClip(clip);
         }
-        catch (Exception e) {return "";}
-        return "";
+        catch (Exception e) {return empty;}
+        return empty;
     }
     public String getClipboardEntry(int n) {
         try {
@@ -1050,8 +1062,8 @@ public class CustomInputMethodService extends InputMethodService implements Keyb
             if (item != null) text = item.getText();
             if (text != null) return text.toString();
         }
-        catch (Exception e) {return "";}
-        return "";
+        catch (Exception e) {return empty;}
+        return empty;
     }
 
     public void setCapsOn(boolean on) {
@@ -1183,13 +1195,19 @@ public class CustomInputMethodService extends InputMethodService implements Keyb
         ic.endBatchEdit();
     }
 
+    /*
     @Override
     public boolean onKeyLongPress(int primaryCode, KeyEvent event) {
-        return f;
+        // return f;
+        toastIt(primaryCode +" "+event.toString());
+        return super.onKeyLongPress(primaryCode, event);
     }
+    */
+    
 
     long time;
 
+    
     @Override
     public void onPress(int primaryCode) {
         sharedPreferences = PreferenceManager.getDefaultSharedPreferences(getBaseContext());
@@ -1199,14 +1217,20 @@ public class CustomInputMethodService extends InputMethodService implements Keyb
             v.vibrate(4);
         }
     }
+    
 
+    
     @Override
     public void onRelease(int primaryCode) {
+        
         ic = getCurrentInputConnection();
         time = (System.nanoTime() - time) / 1000000;
+        
         if (time > 300) {
+            // toastIt(primaryCode);
             switch (primaryCode) {
                 case -93: selectAll(); break;
+                /*
                 case -99: ic.deleteSurroundingText(MAX, MAX); break;
                 case -174:
                 case -2003:
@@ -1215,6 +1239,7 @@ public class CustomInputMethodService extends InputMethodService implements Keyb
                 case 31: 
                     performContextMenuAction(16908330);
                 break;
+                */
             }
         }
     }
@@ -1226,8 +1251,8 @@ public class CustomInputMethodService extends InputMethodService implements Keyb
     //     if (ch == null) {
     //         ch = pinyinSlugs.get(Util.normalize(text));
     //     }
-    //     if (ch == null || ch.trim() == null || ch.trim().equals("")) {
-    //         return "";
+    //     if (ch == null || ch.trim() == null || ch.trim().equals(empty)) {
+    //         return empty;
     //     }
     //     return ch;
     // }
@@ -1247,7 +1272,7 @@ public class CustomInputMethodService extends InputMethodService implements Keyb
     //             commitText(choices[0]);
     //             return t;
     //         }
-    //         if (primaryCode == 32 && getKey(32).label != "" && getKey(32).label != null) {
+    //         if (primaryCode == 32 && getKey(32).label != empty && getKey(32).label != null) {
     //             // ic.deleteSurroundingText(lw.length(), 0);
     //             commitText(String.valueOf(getKey(32).label));
     //             getKey(32).icon = getResources().getDrawable(R.drawable.ic_space, getBaseContext().getTheme());
@@ -1256,7 +1281,7 @@ public class CustomInputMethodService extends InputMethodService implements Keyb
     //             return t;
     //         }
     //         if (ch != null) {
-    //             String[] choices = ch.split("");
+    //             String[] choices = ch.split(empty);
     //             if (choices != null & choices.length > 0) {
     //                 getKey(32).label = choices[0];
     //                 getKey(32).popupCharacters = ch;
@@ -1283,10 +1308,10 @@ public class CustomInputMethodService extends InputMethodService implements Keyb
         /*
         String prev;
         try {
-            prev = String.valueOf(ic.getTextBeforeCursor(1, 0).length() > 0 ? ic.getTextBeforeCursor(1, 0) : "");
+            prev = String.valueOf(ic.getTextBeforeCursor(1, 0).length() > 0 ? ic.getTextBeforeCursor(1, 0) : empty);
         }
         catch (Exception e) {
-            prev = "";
+            prev = empty;
         }
         */
 
@@ -1305,7 +1330,7 @@ public class CustomInputMethodService extends InputMethodService implements Keyb
         }
         else if (length > 0) {
             mComposing.setLength(0);
-            commitText("");
+            commitText(empty);
         }
         */
         /*
@@ -1338,7 +1363,7 @@ public class CustomInputMethodService extends InputMethodService implements Keyb
         }
         else if (length > 0) {
             mComposing.setLength(0);
-            commitText("");
+            commitText(empty);
         }
         else sendKey(KeyEvent.KEYCODE_FORWARD_DEL);
         updateShiftKeyState(getCurrentInputEditorInfo());
@@ -1419,9 +1444,9 @@ public class CustomInputMethodService extends InputMethodService implements Keyb
         Keyboard.Key key1 = getKey(29);
         Keyboard.Key key2 = getKey(30);
         Keyboard.Key key3 = getKey(31);
-        if (key1 != null) key1.label = "";
-        if (key2 != null) key2.label = "";
-        if (key3 != null) key3.label = "";
+        if (key1 != null) key1.label = empty;
+        if (key2 != null) key2.label = empty;
+        if (key3 != null) key3.label = empty;
     }
 
     public void spellcheck(int primaryCode) {
@@ -1468,6 +1493,11 @@ public class CustomInputMethodService extends InputMethodService implements Keyb
         return mCandidateView;
     }
     
+    public void setSuggestion(String suggestion) {
+        List<String> suggestions = new ArrayList<>();
+        suggestions.add(suggestion);
+        setSuggestions(suggestions, false, true);
+    }
     public void setSuggestions(List<String> suggestions, boolean completions, boolean typedWordValid) {
         if (suggestions != null && suggestions.size() > 0) {
             setCandidatesViewShown(true);
@@ -1481,6 +1511,12 @@ public class CustomInputMethodService extends InputMethodService implements Keyb
         }
     }
     
+    public void clearCandidates() {
+        if (mCandidateView != null) {
+            mCandidateView.clear();
+        }
+    }
+    
     public void pickSuggestionManually(int index) {
         if (mCompletionOn && mSuggestions != null && index >= 0 && index < mSuggestions.size()) {
             String completion = mSuggestions.get(index);
@@ -1505,7 +1541,57 @@ public class CustomInputMethodService extends InputMethodService implements Keyb
 
     }
     
+    public void handleCut() {
+        String record;
+        boolean wasntSelecting = f;
+        if (!isSelecting()) {
+            selectLine();
+            wasntSelecting = t;
+        }
+        sendKey(KeyEvent.KEYCODE_CUT);
+        toast.cancel();
+        if (wasntSelecting) {
+            sendKey(KeyEvent.KEYCODE_DEL);
+        }
     
+        record = getClipboardEntry(0);
+        if (!record.equals(empty)) {
+            clipboardHistory.add(record);
+        }
+        
+        toastIt(getClipboardEntry(0)+"\n"+record+"\n"+getText(ic));
+        // setSuggestion(record);
+    }
+    public void handleCopy() {
+        String record;
+        
+        if (!isSelecting()) {
+            selectLine();
+        }
+        sendKey(KeyEvent.KEYCODE_COPY);
+        toast.cancel();
+
+        record = getClipboardEntry(0);
+        if (!record.equals(empty)) {
+            clipboardHistory.add(record);
+        }
+    }
+    public void handlePaste() {
+        /*
+        String indent = Util.getIndentation(prevLine());
+        if (sharedPreferences.getBoolean("spaces", t)) {
+            if (indent.length() > 0) {
+                commitText(getClipboardEntry(0).trim());
+                break;
+            }
+        }
+        */
+        trimClipboard();
+        sendKey(KeyEvent.KEYCODE_PASTE);
+        if (mCandidateView != null) {
+            mCandidateView.clear();
+        }
+    }
     
     @Override
     public void onKey(int primaryCode, int[] keyCodes) {
@@ -1524,7 +1610,7 @@ public class CustomInputMethodService extends InputMethodService implements Keyb
         //     }
         // }
         
-        if (currentKeyboard.key.equals("enmorse") && !Morse.fromChar(String.valueOf((char)primaryCode)).equals("")) {
+        if (currentKeyboard.key.equals("enmorse") && !Morse.fromChar(String.valueOf((char)primaryCode)).equals(empty)) {
             String res = Morse.fromChar(String.valueOf((char)primaryCode));
             if (kv.isShifted()) res = res.toUpperCase();
             toastIt((char)primaryCode+" "+res);
@@ -1557,7 +1643,7 @@ public class CustomInputMethodService extends InputMethodService implements Keyb
             if (primaryCode == -2001) performReplace(Util.convertFromUnicodeToNumber(getText(ic)));
             if (primaryCode == -2002) performReplace(Util.convertFromNumberToUnicode(getText(ic)));
             if (Util.contains(KeyCodes.hexCaptures, primaryCode)) {
-                if (hexBuffer.length() > 3) hexBuffer = "";
+                if (hexBuffer.length() > 3) hexBuffer = empty;
                 hexBuffer += (char)primaryCode;
             }
             if (primaryCode == -2003) commitText(StringUtils.leftPad(hexBuffer, 4, "0"));
@@ -1567,7 +1653,7 @@ public class CustomInputMethodService extends InputMethodService implements Keyb
                 else hexBuffer = "0000";
             }
             if (primaryCode == -2006) hexBuffer = "0000";
-            getKey(-2003).label = hexBuffer.equals("0000") ? "" : StringUtils.leftPad(hexBuffer, 4, "0");
+            getKey(-2003).label = hexBuffer.equals("0000") ? empty : StringUtils.leftPad(hexBuffer, 4, "0");
             getKey(-2004).label = String.valueOf((char)(int)Integer.decode("0x" + StringUtils.leftPad(hexBuffer, 4, "0")));
             redraw();
             return;
@@ -1585,7 +1671,6 @@ public class CustomInputMethodService extends InputMethodService implements Keyb
             case 133: sendKey(KeyEvent.KEYCODE_F3); break;
             case 132: sendKey(KeyEvent.KEYCODE_F2); break;
             case 131: sendKey(KeyEvent.KEYCODE_F1); break;
-            
             case 10:
                 EditorInfo curEditor = getCurrentInputEditorInfo();
                 // if (kv.getKeyboard().isShifted()) {commitText("\n", 1);}
@@ -1601,6 +1686,7 @@ public class CustomInputMethodService extends InputMethodService implements Keyb
                 break;
             case 7:
                 if (sharedPreferences.getBoolean("spaces", t)) {
+                    toastIt(prevLine().length()+" "+prevLine().length() % 4);
                     commitText(spaces);
                     if (isSelecting()) {
                         ic.setSelection(getSelectionStart(), getSelectionEnd() + spaces.length());
@@ -1697,48 +1783,77 @@ public class CustomInputMethodService extends InputMethodService implements Keyb
                 else handleDelete();
             break;
             case -8: selectAll(); break;
-            case -9:
-                boolean wasntSelecting = f;
-                if (!isSelecting()) {
-                    selectLine();
-                    wasntSelecting = t;
-                }
-                sendKey(KeyEvent.KEYCODE_CUT);
-                toast.cancel();
-                if (wasntSelecting) {
-                    sendKey(KeyEvent.KEYCODE_DEL);
-                }
-
-                record = getClipboardEntry(0);
-                if (!record.equals("")) {
-                    clipboardHistory.add(record);
-                }
+            case -9: handleCut(); break;
+            case -10: handleCopy(); break;
+            case -11: handlePaste(); break;
+            case -73: goToStart(); break;
+            case -74: goToEnd(); break;
+            case -76: Variables.toggleSelect(getSelectionStart()); break;
+            case -75: selectNone(); break;
+            case -77: prevWord(1); break;
+            case -78: nextWord(1); break;
+            case -93: selectLine(); break;
+            case -94: commitText(nextLine()+"\n"+ prevLine()); break;
+            case -99:
+                if (!isSelecting()) selectLine();
+                sendKey(KeyEvent.KEYCODE_DEL);
             break;
-            case -10:
-                if (!isSelecting()) {
-                    selectLine();
+            case -123: clearAll(); break;
+            case -100:
+            case -101: prevKeyboard(); break;
+            case -102: nextKeyboard(); break;
+            case -107: navigate(KeyEvent.KEYCODE_DPAD_UP); break;
+            case -108: navigate(KeyEvent.KEYCODE_DPAD_LEFT); break;
+            case -109: navigate(KeyEvent.KEYCODE_DPAD_DOWN); break;
+            case -110: navigate(KeyEvent.KEYCODE_DPAD_CENTER); break;
+            case -111: navigate(KeyEvent.KEYCODE_DPAD_RIGHT); break;
+            case  -22: navigate(KeyEvent.KEYCODE_PAGE_UP); break;
+            case  -23: navigate(KeyEvent.KEYCODE_PAGE_DOWN); break;
+            case  -25:
+                navigate(KeyEvent.KEYCODE_MOVE_HOME);
+                if (String.valueOf(ic.getTextBeforeCursor(1, 0)).contains("\n")) {
+                    sendKey(KeyEvent.KEYCODE_DPAD_RIGHT, Util.getIndentation(nextLine()).length());
                 }
-                sendKey(KeyEvent.KEYCODE_COPY);
-                toast.cancel();
-
-                record = getClipboardEntry(0);
-                if (!record.equals("")) {
-                    clipboardHistory.add(record);
+            break;
+            case  -26: navigate(KeyEvent.KEYCODE_MOVE_END); break;
+            case -117: navigate(KeyEvent.KEYCODE_DPAD_UP); navigate(KeyEvent.KEYCODE_DPAD_LEFT); break;
+            case -118: navigate(KeyEvent.KEYCODE_DPAD_UP); navigate(KeyEvent.KEYCODE_DPAD_RIGHT); break;
+            case -119: navigate(KeyEvent.KEYCODE_DPAD_DOWN); navigate(KeyEvent.KEYCODE_DPAD_LEFT); break;
+            case -120: navigate(KeyEvent.KEYCODE_DPAD_DOWN); navigate(KeyEvent.KEYCODE_DPAD_RIGHT); break;
+            case -112:
+                if (Variables.isMeta()) Variables.setMetaOff();
+                else Variables.setMetaOn();
+                redraw();
+            break;
+            case -113:
+                if (Variables.isCtrl()) Variables.setCtrlOff();
+                else Variables.setCtrlOn();
+                redraw();
+            break;
+            case -114:
+                if (Variables.isAlt()) Variables.setAltOff();
+                else Variables.setAltOn();
+                redraw();
+            break;
+            case -121:
+                if (Variables.isCtrl() || Variables.isAlt()) {
+                    if (Variables.isCtrl() && Variables.isAlt()) ic.sendKeyEvent(new KeyEvent(100, 100, KeyEvent.ACTION_DOWN, 67, 0, KeyEvent.META_CTRL_ON | KeyEvent.META_ALT_ON));
+                    if (Variables.isAlt())  ic.sendKeyEvent(new KeyEvent(100, 100, KeyEvent.ACTION_DOWN, 67, 0, KeyEvent.META_ALT_ON));
+                    if (Variables.isCtrl()) ic.sendKeyEvent(new KeyEvent(100, 100, KeyEvent.ACTION_DOWN, 67, 0, KeyEvent.META_CTRL_ON));
                 }
+                else sendKey(KeyEvent.KEYCODE_DEL);
             break;
-            case -11:
-                /*
-                String indent = Util.getIndentation(prevLine());
-                if (sharedPreferences.getBoolean("spaces", t)) {
-                    if (indent.length() > 0) {
-                        commitText(getClipboardEntry(0).trim());
-                        break;
-                    }
+            case -122:
+                if (Variables.isCtrl() || Variables.isAlt()) {
+                    if (Variables.isCtrl() && Variables.isAlt()) ic.sendKeyEvent(new KeyEvent(100, 100, KeyEvent.ACTION_DOWN, 61, 0, KeyEvent.META_CTRL_ON | KeyEvent.META_ALT_ON));
+                    if (Variables.isAlt())  ic.sendKeyEvent(new KeyEvent(100, 100, KeyEvent.ACTION_DOWN, 61, 0, KeyEvent.META_ALT_ON));
+                    if (Variables.isCtrl()) ic.sendKeyEvent(new KeyEvent(100, 100, KeyEvent.ACTION_DOWN, 61, 0, KeyEvent.META_CTRL_ON));
                 }
-                */
-                trimClipboard();
-                sendKey(KeyEvent.KEYCODE_PASTE);
+                else sendKey(KeyEvent.KEYCODE_TAB);
             break;
+            case -148: showSettings(); break;
+            case -149: showVoiceInput(); break; // üéôüé§
+            
             case -15: sendKey(KeyEvent.KEYCODE_VOLUME_DOWN); break;
             case -16: sendKey(KeyEvent.KEYCODE_VOLUME_UP); break;
             case -17: sendKey(KeyEvent.KEYCODE_CAMERA); break;
@@ -1764,8 +1879,7 @@ public class CustomInputMethodService extends InputMethodService implements Keyb
             case -64: sendKey(KeyEvent.KEYCODE_CALCULATOR); break;
             case -65: sendKey(KeyEvent.KEYCODE_CONTACTS); break;
             case -67: sendKey(KeyEvent.KEYCODE_CALENDAR); break;
-            case -73: goToStart(); break;
-            case -74: goToEnd(); break;
+            
             case -12: Variables.toggleBolded(); break;
             case -13: Variables.toggleItalic(); break;
             case -14: Variables.setAllEmOff(); break;
@@ -1790,10 +1904,7 @@ public class CustomInputMethodService extends InputMethodService implements Keyb
             case -71: Variables.toggle127462(); break;
             case -57: Variables.toggleCaps(); break;
             case -50: Variables.toggleReflected(); break;
-            case -76: Variables.toggleSelect(getSelectionStart()); break;
-            case -75: selectNone(); break;
-            case -77: prevWord(1); break;
-            case -78: nextWord(1); break;
+
             case -80: commitText(getClipboardEntry(0)); break;
             case -81: commitText(getClipboardEntry(1)); break;
             case -82: commitText(getClipboardEntry(2)); break;
@@ -1802,64 +1913,7 @@ public class CustomInputMethodService extends InputMethodService implements Keyb
             case -85: commitText(getClipboardEntry(5)); break;
             case -86: commitText(getClipboardEntry(6)); break;
             case -87: commitText(getClipboardEntry(7)); break;
-            case -100:
-            case -101: prevKeyboard(); break;
-            case -102: nextKeyboard(); break;
-            case -107: navigate(KeyEvent.KEYCODE_DPAD_UP); break;
-            case -108: navigate(KeyEvent.KEYCODE_DPAD_LEFT); break;
-            case -109: navigate(KeyEvent.KEYCODE_DPAD_DOWN); break;
-            case -110: navigate(KeyEvent.KEYCODE_DPAD_CENTER); break;
-            case -111: navigate(KeyEvent.KEYCODE_DPAD_RIGHT); break;
-            case  -22: navigate(KeyEvent.KEYCODE_PAGE_UP); break;
-            case  -23: navigate(KeyEvent.KEYCODE_PAGE_DOWN); break;
-            case  -25:
-                navigate(KeyEvent.KEYCODE_MOVE_HOME);
-                if (String.valueOf(ic.getTextBeforeCursor(1, 0)).contains("\n")) {
-                    sendKey(KeyEvent.KEYCODE_DPAD_RIGHT, Util.getIndentation(nextLine()).length());
-                }
-            break;
-            case  -26: navigate(KeyEvent.KEYCODE_MOVE_END); break;
-            case -117: navigate(KeyEvent.KEYCODE_DPAD_UP); navigate(KeyEvent.KEYCODE_DPAD_LEFT); break;
-            case -118: navigate(KeyEvent.KEYCODE_DPAD_UP); navigate(KeyEvent.KEYCODE_DPAD_RIGHT); break;
-            case -119: navigate(KeyEvent.KEYCODE_DPAD_DOWN); navigate(KeyEvent.KEYCODE_DPAD_LEFT); break;
-            case -120: navigate(KeyEvent.KEYCODE_DPAD_DOWN); navigate(KeyEvent.KEYCODE_DPAD_RIGHT); break;
-            case -112:
-                if (Variables.isMeta()) Variables.setMetaOff();
-                else Variables.setMetaOn();
-                redraw();
-            case -113:
-                if (Variables.isCtrl()) Variables.setCtrlOff();
-                else Variables.setCtrlOn();
-                redraw();
-            break;
-            case -114:
-                if (Variables.isAlt()) Variables.setAltOff();
-                else Variables.setAltOn();
-                redraw();
-            break;
-            case -121:
-                if (Variables.isCtrl() || Variables.isAlt()) {
-                    if (Variables.isCtrl() && Variables.isAlt()) ic.sendKeyEvent(new KeyEvent(100, 100, KeyEvent.ACTION_DOWN, 67, 0, KeyEvent.META_CTRL_ON | KeyEvent.META_ALT_ON));
-                    if (Variables.isAlt())  ic.sendKeyEvent(new KeyEvent(100, 100, KeyEvent.ACTION_DOWN, 67, 0, KeyEvent.META_ALT_ON));
-                    if (Variables.isCtrl()) ic.sendKeyEvent(new KeyEvent(100, 100, KeyEvent.ACTION_DOWN, 67, 0, KeyEvent.META_CTRL_ON));
-                }
-                else sendKey(KeyEvent.KEYCODE_DEL);
-            break;
-            case -122:
-                if (Variables.isCtrl() || Variables.isAlt()) {
-                    if (Variables.isCtrl() && Variables.isAlt()) ic.sendKeyEvent(new KeyEvent(100, 100, KeyEvent.ACTION_DOWN, 61, 0, KeyEvent.META_CTRL_ON | KeyEvent.META_ALT_ON));
-                    if (Variables.isAlt())  ic.sendKeyEvent(new KeyEvent(100, 100, KeyEvent.ACTION_DOWN, 61, 0, KeyEvent.META_ALT_ON));
-                    if (Variables.isCtrl()) ic.sendKeyEvent(new KeyEvent(100, 100, KeyEvent.ACTION_DOWN, 61, 0, KeyEvent.META_CTRL_ON));
-                }
-                else sendKey(KeyEvent.KEYCODE_TAB);
-            break;
-            case -93: selectLine(); break;
-            case -94: commitText(nextLine()+"\n"+ prevLine()); break;
-            case -99:
-                if (!isSelecting()) selectLine();
-                sendKey(KeyEvent.KEYCODE_DEL);
-            break;
-            case -123: clearAll(); break;
+            
             case -115: commitText(Util.generateRandomInt(1, 10) + " "); break;
             case -116: commitText(Util.nowAsLong()+" "+Util.nowAsInt()); break;
             case -124: performReplace(getText(ic).toUpperCase()); break;
@@ -1922,22 +1976,22 @@ public class CustomInputMethodService extends InputMethodService implements Keyb
             case -103:
                 commitText(Util.castALot());
                 String trigram;
-                if (!Hexagram.buildTrigram(ic.getTextBeforeCursor(3, 0).toString()).equals("")) {
+                if (!Hexagram.buildTrigram(ic.getTextBeforeCursor(3, 0).toString()).equals(empty)) {
                     trigram = Hexagram.buildTrigram(ic.getTextBeforeCursor(3, 0).toString());
                     ic.deleteSurroundingText(3, 0);
                     commitText(trigram);
                 }
-                if (!Hexagram.buildTrigram(ic.getTextBeforeCursor(2, 0).toString()).equals("")) {
+                if (!Hexagram.buildTrigram(ic.getTextBeforeCursor(2, 0).toString()).equals(empty)) {
                     trigram = Hexagram.buildTrigram(ic.getTextBeforeCursor(2, 0).toString());
                     ic.deleteSurroundingText(2, 0);
                     commitText(trigram);
                 }
-                if (!Hexagram.buildDigram(ic.getTextBeforeCursor(2, 0).toString()).equals("")) {
+                if (!Hexagram.buildDigram(ic.getTextBeforeCursor(2, 0).toString()).equals(empty)) {
                     trigram = Hexagram.buildDigram(ic.getTextBeforeCursor(2, 0).toString());
                     ic.deleteSurroundingText(2, 0);
                     commitText(trigram);
                 }
-                if (!Hexagram.buildHexagram(ic.getTextBeforeCursor(2, 0).toString()).equals("")) {
+                if (!Hexagram.buildHexagram(ic.getTextBeforeCursor(2, 0).toString()).equals(empty)) {
                     trigram = Hexagram.buildHexagram(ic.getTextBeforeCursor(2, 0).toString());
                     ic.deleteSurroundingText(2, 0);
                     commitText(trigram);
@@ -1951,8 +2005,6 @@ public class CustomInputMethodService extends InputMethodService implements Keyb
             case -106: performReplace(Util.reverseLines(getText(ic))); break;
             case -146: performReplace(Util.uniqueLines(getText(ic))); break;
             case -147: performReplace(Util.shuffleLines(getText(ic))); break;
-            case -148: showSettings(); break;
-            case -149: showVoiceInput(); break; // üéôüé§
             case -152: performContextMenuAction(16908337); break; // pasteAsPlainText,
             case -150: performContextMenuAction(16908338); break; // undo ‚éå
             case -151: performContextMenuAction(16908339); break; // redo
diff --git a/app/src/main/java/com/custom/keyboard/CustomKeyboardView.java b/app/src/main/java/com/custom/keyboard/CustomKeyboardView.java
index 64356b9..4c2cad5 100644
--- a/app/src/main/java/com/custom/keyboard/CustomKeyboardView.java
+++ b/app/src/main/java/com/custom/keyboard/CustomKeyboardView.java
@@ -37,22 +37,25 @@ public class CustomKeyboardView extends KeyboardView {
         return (CustomKeyboard)getKeyboard();
     }
     
+    
     @Override
     protected boolean onLongPress(Key key) {
+        /*
         if (key.codes[0] == Keyboard.KEYCODE_CANCEL) {
             getOnKeyboardActionListener().onKey(-100, null);
             return true;
         }
-        if (key.popupResId != 2131361901) {
-            return super.onLongPress(key);
-        }
         if (key.popupCharacters == null || key.popupCharacters.length() == 0) {
-            getOnKeyboardActionListener().onKey(key.codes[0], null);
-            return true;
+                getOnKeyboardActionListener().onKey(key.codes[0], null);
+                return true;
+            }
         }
+        */
         if (key.popupCharacters != null && key.popupCharacters.length() == 1) {
-            getOnKeyboardActionListener().onKey(key.popupCharacters.charAt(0), null);
-            return true;
+            if (sharedPreferences.getBoolean("single_hint", true)) {
+                getOnKeyboardActionListener().onKey(key.popupCharacters.charAt(0), null);
+                return true;
+            }
         }
         return super.onLongPress(key);
     }
diff --git a/app/src/main/res/xml/preferences.xml b/app/src/main/res/xml/preferences.xml
index f75c620..e5ce711 100644
--- a/app/src/main/res/xml/preferences.xml
+++ b/app/src/main/res/xml/preferences.xml
@@ -71,8 +71,7 @@
             <CheckBoxPreference android:key="glagolitic" android:title="Glagolitic" android:defaultValue="true" />
             <CheckBoxPreference android:key="gothic" android:title="Gothic" android:defaultValue="true" />
             <CheckBoxPreference android:key="greek" android:title="Greek" android:defaultValue="true" />
-            <CheckBoxPreference android:key="hiragana" android:title="Hiragana" android:defaultValue="true" />
-            <CheckBoxPreference android:key="katakana" android:title="Katakana" android:defaultValue="true" />
+            <CheckBoxPreference android:key="kana" android:title="Kana" android:defaultValue="true" />
             <CheckBoxPreference android:key="lisu" android:title="Lisu" android:defaultValue="true" />
             <CheckBoxPreference android:key="ogham" android:title="Ogham" android:defaultValue="true" />
             <CheckBoxPreference android:key="pinyin" android:title="Pinyin" android:defaultValue="true" />
diff --git a/bin/custom-keyboard.signed.apk b/bin/custom-keyboard.signed.apk
index ffaf4b0..c699cfd 100644
Binary files a/bin/custom-keyboard.signed.apk and b/bin/custom-keyboard.signed.apk differ
